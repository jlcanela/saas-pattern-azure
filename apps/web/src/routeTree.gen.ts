/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProjectsImport } from './routes/projects'
import { Route as AdministrationImport } from './routes/administration'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as ProjectsProjectIdImport } from './routes/projects_.$projectId'

// Create/Update Routes

const ProjectsRoute = ProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRoute,
} as any)

const AdministrationRoute = AdministrationImport.update({
  id: '/administration',
  path: '/administration',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdRoute = ProjectsProjectIdImport.update({
  id: '/projects_/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/administration': {
      id: '/administration'
      path: '/administration'
      fullPath: '/administration'
      preLoaderRoute: typeof AdministrationImport
      parentRoute: typeof rootRoute
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsImport
      parentRoute: typeof rootRoute
    }
    '/projects_/$projectId': {
      id: '/projects_/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/administration': typeof AdministrationRoute
  '/projects': typeof ProjectsRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/administration': typeof AdministrationRoute
  '/projects': typeof ProjectsRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/administration': typeof AdministrationRoute
  '/projects': typeof ProjectsRoute
  '/projects_/$projectId': typeof ProjectsProjectIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/administration'
    | '/projects'
    | '/projects/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/administration' | '/projects' | '/projects/$projectId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/administration'
    | '/projects'
    | '/projects_/$projectId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AdministrationRoute: typeof AdministrationRoute
  ProjectsRoute: typeof ProjectsRoute
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AdministrationRoute: AdministrationRoute,
  ProjectsRoute: ProjectsRoute,
  ProjectsProjectIdRoute: ProjectsProjectIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/administration",
        "/projects",
        "/projects_/$projectId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/administration": {
      "filePath": "administration.tsx"
    },
    "/projects": {
      "filePath": "projects.tsx"
    },
    "/projects_/$projectId": {
      "filePath": "projects_.$projectId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
